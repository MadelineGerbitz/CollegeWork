/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Client program for the factorial demonstration.
 * @author MadelineGerbitz
 */

import java.io.*;
import java.net.*;

public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    import discord
from discord.ext import commands

import random
import urllib.request
from PIL import Image

opener = urllib.request.build_opener()
opener.addheaders=[('User-Agent', 'Mozilla/5.0')]
urllib.request.install_opener(opener)

class FryCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        print("Fry cog loaded!")

    @commands.command()
    async def Fry(self, ctx):
        """Fries an attached image"""
        url = ctx.message.attachments[0].url
        type = url[-3:]
        urllib.request.urlretrieve(url, "fry.{}".format(type))
        await ctx.send("Order up!")
        if(type == "png"):
            img = Image.open("fry.png")
            if(img.mode == "RGBA"):
                print("here " + img.mode)
                img = img.convert("RGB")
                img.save("fried.jpg", "JPEG", quality=random.randint(0,5), optimize=True, progressive=True)
            img.save("fried.jpg", "JPEG", quality=random.randint(0,5), optimize=True, progressive=True)
            await ctx.send(file=discord.File("fried.jpg"))
        elif(type == "jpg"):
            img = Image.open("fry.jpg")
            img.save("fried.jpg", "JPEG", quality=random.randint(0,5), optimize=True, progressive=True)
            await ctx.send(file=discord.File("fried.jpg"))
        else:
            await ctx.send("Sorry, but your order was just too shitty...")


def setup(bot):
    bot.add_cog(FryCog(bot))

    Socket socket;
    PrintWriter printWriter;
    BufferedReader bufferedReader;
    
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ServerAddressField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        PortNumberField = new javax.swing.JTextField();
        ConnectButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        MessageField = new javax.swing.JTextField();
        MessageSendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MessageStream = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("IP Address");

        ServerAddressField.setText("IP Address");

        jLabel2.setText("Port Number");

        PortNumberField.setText("Port Number");
        PortNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PortNumberFieldActionPerformed(evt);
            }
        });

        ConnectButton.setText("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Send to server");

        MessageField.setText("0");

        MessageSendButton.setText("Send");
        MessageSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MessageSendButtonActionPerformed(evt);
            }
        });

        MessageStream.setColumns(20);
        MessageStream.setRows(5);
        jScrollPane1.setViewportView(MessageStream);

        jLabel4.setText("Output:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MessageSendButton)
                        .addGap(197, 333, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ConnectButton)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ServerAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1))
                                        .addGap(31, 31, 31)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(PortNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(MessageField))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ServerAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PortNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConnectButton)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MessageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 32, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(MessageSendButton)))
                .addGap(8, 8, 8)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PortNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PortNumberFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PortNumberFieldActionPerformed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        if(ConnectButton.getText().equalsIgnoreCase("Connect"))
        {
            try
            {
                socket = new Socket(ServerAddressField.getText(), 
                        Integer.parseInt(PortNumberField.getText()));
                bufferedReader = new BufferedReader(new InputStreamReader(
                socket.getInputStream()));
                printWriter = new PrintWriter(socket.getOutputStream(), true);
                MessageStream.append("Connected to Server\n");
                ConnectButton.setText("Disconnect");
            }
            catch(Exception e)
            {
                MessageStream.append("Error: " + e);
                socket = null;
            }
        }
        else
        {
            try
            {
                bufferedReader.close();
                printWriter.close();
                socket.close();
                socket = null;
                ConnectButton.setText("Connect");
                MessageStream.append("Disconnected!");
            }
            catch(IOException e)
            {
                MessageStream.append("Error: " + e);
            }
        }
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void MessageSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MessageSendButtonActionPerformed
        if(socket != null)
        {
            try
            {
                String message = MessageField.getText();
                printWriter.println(message);
                MessageStream.append("Client: " + message + "\n");
                String response = bufferedReader.readLine();
                MessageStream.append("Server: " + response + "\n");
                if(message.equals("quit") && response.equals("Good Bye!"))
                {
                    try
                    {
                        bufferedReader.close();
                        printWriter.close();
                        socket.close();
                        socket = null;
                        ConnectButton.setText("Connect");
                        MessageStream.append("Disconnected!\n");
                    }
                    catch(IOException e)
                    {
                        MessageStream.append("Error: " + e);
                    }
                }
            }
            catch(IOException e)
            {
                MessageStream.append("Error: " + e);
            }
        }
    }//GEN-LAST:event_MessageSendButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectButton;
    private javax.swing.JTextField MessageField;
    private javax.swing.JButton MessageSendButton;
    private javax.swing.JTextArea MessageStream;
    private javax.swing.JTextField PortNumberField;
    private javax.swing.JTextField ServerAddressField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
